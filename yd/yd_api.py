import numpy as np
import yadisk
import pandas as pd
from io import BytesIO

import config


y = yadisk.YaDisk(token=config.OAUTH_TOKEN)


def read_excel_from_yadisk(file_path):
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    file_bytes = BytesIO()
    y.download(file_path, file_bytes)
    file_bytes.seek(0)

    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    return pd.ExcelFile(file_bytes)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

def get_df(file_path):
    try:
        excel_data = read_excel_from_yadisk(file_path)

        all_sheets = excel_data.parse(skiprows=2, sheet_name=None)
        combined_df = pd.concat(all_sheets.values(), ignore_index=True)
        combined_df = combined_df.drop(columns=["‚Ññ"])
        combined_df = combined_df.dropna(subset=["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"])
        combined_df["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"] = combined_df["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"].apply(lambda x: f"{str(x)[:7]}")

        return combined_df
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"


# print(get_df(FILE_PATH_PIE))


def get_by_stud_id(stud_id, file_path):
    df = get_df(file_path)
    if df["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"].isin([stud_id]).any():
        row = df.loc[df["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"] == stud_id].iloc[0]
        return row
    return "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"


def format_student_data(row):
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    response = [
        f"üìä <b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞</b>",
        f"<b>–ù–æ–º–µ—Ä:</b> {row['–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä']}",
        "",
        "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>"
    ]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    for subject, grade in row.items():
        if subject == "–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä" or subject == "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ":
            continue
        if str(grade).strip().lower() != "nan":
            grade_str = ("‚úÖ –∑–∞—á—ë—Ç" if str(grade).strip().lower() == "–∑–∞—á"
                         else "‚ùå –Ω–µ–∑–∞—á—ë—Ç" if str(grade).strip().lower() == "–Ω–µ–∑–∞—á/"
            else "‚ùå –Ω–µ—è–≤–∫–∞" if str(grade).strip().lower() == "–Ω–µ—è–≤/"
            else "üî¥ 2" if str(grade).strip() == "2/"
            else f"üü¢ {grade}")
            response.append(f" - <i>{subject}:</i> {grade_str}")

    return "\n".join(response)


# print(get_by_stud_id("1036399", FILE_PATH_PIE))


def find_diff_cells(df1, df2):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    if df1.shape != df2.shape:
        raise ValueError("DataFrames must have the same shape")
    if not df1.index.equals(df2.index):
        raise ValueError("Indices do not match")
    if not df1.columns.equals(df2.columns):
        raise ValueError("Columns do not match")

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π —Å —É—á—ë—Ç–æ–º NaN
    mask = (df1 != df2) & ~(df1.isna() & df2.isna())

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    rows, cols = np.where(mask)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, —Å—Ç–æ–ª–±–µ—Ü)
    diff_cells = [(df1.index[row], df1.columns[col]) for row, col in zip(rows, cols)]

    return diff_cells


old_df = None


def check_upd(file_paths):
    global old_df
    new_df = get_df(file_paths[0])
    for i in file_paths[1:]:
        new_df = pd.concat([new_df, get_df(i)], ignore_index=True)
    if old_df is None:
        old_df = new_df
        return None
    if not old_df.equals(new_df):
        upds_list = []
        upds = find_diff_cells(old_df, new_df)
        for upd in upds:
            upds_list.append((upd, new_df[upd[1]][upd[0]], new_df["–°—Ç—É–¥–µ–Ω—á. –Ω–æ–º–µ—Ä"][upd[0]]))
        old_df = new_df
        return upds_list
    return None

