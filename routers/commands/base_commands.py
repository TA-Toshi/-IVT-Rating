from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import or_f
from keyboards.reply_keyboards import directions_keyboard
from states.states import StudentStates
from yd.db import add_to_db, del_from_db, get_by_telegram_id, del_all_by_id
from yd.yd_api import get_by_stud_id, format_student_data

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(StudentStates.waiting_direction)
    await message.answer(
        "üëã <b>–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</b>\n",
        reply_markup=directions_keyboard,
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(text="–¢—É—Ç –±—É–¥—É—Ç –Ω–∏—Å—Ç—Ä—É–∫—Ü–∏–∏")


@router.message(Command("sub"))
async def cmd_sub(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ")
    await state.set_state(StudentStates.pre_sub)


@router.message(Command("unsub"))
async def cmd_sub(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = []
    students = await get_by_telegram_id(message.from_user.id)
    if students:
        for i in range(0, len(students), 2):
            row = students[i:i + 2]
            keyboard_row = [
                InlineKeyboardButton(text=name, callback_data=name)
                for name in row
            ]
            keyboard.append(keyboard_row)
        keyboard.append([InlineKeyboardButton(text="–í—Å–µ", callback_data="all")])
        await message.answer(
            text="–û—Ç –∫–æ–≥–æ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(StudentStates.unsub)
    else:
        await message.answer(text=f"–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        await state.clear()


@router.message(or_f(Command("check"), F.text == "‚Äçüë©‚Äçüë¶ –ü–æ–¥–ø–∏—Å–∫–∏"))
async def check_by_sub(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = []
    students = await get_by_telegram_id(message.from_user.id)
    if students:
        for i in range(0, len(students), 2):
            row = students[i:i + 2]
            keyboard_row = [
                InlineKeyboardButton(text=name, callback_data=name)
                for name in row
            ]
            keyboard.append(keyboard_row)
        await message.answer(
            text="–ß—å—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(StudentStates.check)
    else:
        await message.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
        )


@router.message(StudentStates.pre_sub, F.text.regexp(r'^\d{7}$'))
async def pre_cmd_sub(message: types.Message, state: FSMContext):
    result = get_by_stud_id(message.text)
    if result is False:
        await message.answer(text=f"–°—Ç—É–¥–µ–Ω—Ç–∞ —Å ‚Ññ{message.text} –Ω–µ—Ç")
        await state.set_state(StudentStates.pre_sub)
    else:
        await add_to_db(message.from_user.id, message.text)
        await message.answer(text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Ññ{message.text}")
        await state.clear()


@router.message(StudentStates.pre_sub)
async def sub_err(message: types.Message, state: FSMContext):
    await message.answer(text=f"‚ùå –í–≤–µ–¥–∏—Ç–µ 7 —Ü–∏—Ñ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
    await state.set_state(StudentStates.pre_sub)


@router.callback_query(StudentStates.unsub)
async def unsub_choice(callback: types.CallbackQuery, state: FSMContext):
    student = callback.data
    if student == "all":
        await del_all_by_id(callback.from_user.id)
        await callback.message.edit_text(text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö")
        await state.clear()
    else:
        await del_from_db(callback.from_user.id, student)
        await callback.message.edit_text(text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {student}")
        await state.clear()


@router.callback_query(StudentStates.check)
async def check_by_sub_choice(callback: types.CallbackQuery, state: FSMContext):
    student = callback.data
    student_data = get_by_stud_id(student)
    await callback.message.edit_text(
        format_student_data(student_data),
        parse_mode="HTML"
    )
    await state.clear()
